React

WhatsApp Messages -> 
Assume there are 3 messages
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
	
Original DOM
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
Virtual DOM 
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
	
On New Message Arrives 
Virtual DOM - recreated
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' fontSize=20 />
	<text value='Good to Hear' />
Compares each node with original DOM
new Nodes -> will be injected
updated Nodes -> Syncronized/Updated
nodes are deleted -> removed in orginal DOM 

Ex:
Original/Virtual DOM -> r1, r2 , r3 are restaurants
When Data Changes -> r1, r21, r4, r5 
	Virtual DOM -> recreated with r1, r21, r4, r5 and then below changes are applied to original DOM
		-> r2 node is updated with r21
		->r3 will be deleted
		-> r4, r5 will be injected
		
React Principle
	When page is loaded for first time, Virtual DOM and Original DOM are created. 
	Virtual DOM is just replica/clone of original DOM.
	When data changes => Virtual DOM is recreated
	and then Virtual DOM and Original DOM are compared node by node
	if it finds new Node -> Injected
				updated Node -> Updated
				missing in new Virtual DOM -> Deleted
				
Libraries to import
	React - React.createElement
	ReactDom - ReactDom.render(what to render, where to render);
	Babel -> converts our JSX syntax into older structure 
	
React.createElement(type, attributes, innerHTML);

Old Version
var element = React.createElement('div', { id: 'div1'}, 'Welcome to Demo');

New Version 
var element = <div> Welcome to Demo 2</div>;

In New Version, we write JSX.

HTML vs JSX
	JSX tags should close. 
	
HTML
	Not Compiled.
	UI Elements are added to screen directly.
JSX
	Compiled
	It will be converted into old standard(React.CreateElement) and then elements are created dynamically.
	
function TestComponent(props) {

}

in Old syntax
TestComponent({ name: ''});

in JSX
<TestComponent name='' />

HTML - Inline Styles
<h3 style="color:green">

JSX
<h3 style={{ color: "green" }}>

Creating React Component
Create a class and extend the React.Component class and implement the render method.


Variables inside React Component
	Block Level  Variable => Variable created with in a function of React Component. => var age, var name => Can be accessible with in the block and cant be accessible outside the block. 
	Private Variable => Not possible to use in ES6
	public Variable => this.age, this.name => Can be accessible in all functions of React Component.
	State Level Variable => this.state.age, this.state.name => Can be accessible in all functions of React Component.
	
We update the state using internal function this.setState 

Assume we need a,b,c,d,e variables inside state

constructor(props){
	super(props); // super is used to call base/parent class constructor
	this.state = {
		a: 1, 
		b: 2,
		c: 3,
		d: 4,
		e: 5
	}
}
	
Assume we need to update c to 10, e to 20
	this.setState( { c: 10, e: 20 }); => screen refreshes automatically.
	
Assume we need to update c to 3, e to 5
	this.setState( { c: 3, e: 5 }) => screen will not update as there is no change in state variables.
	
.bind => bind(this) to be added in order to pass scope to the event method


fetching the value on events => event.target.value

Constructing Li Elements
HTML
<ul>
	<li>React</li>
	<li>React Native </li>
</ul>

